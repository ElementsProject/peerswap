// Code generated by MockGen. DO NOT EDIT.
// Source: electrum/electrum.go
//
// Generated by this command:
//
//	mockgen -source=electrum/electrum.go -destination=electrum/mock/electrum.go
//

// Package mock_electrum is a generated GoMock package.
package mock_electrum

import (
	context "context"
	reflect "reflect"

	electrum "github.com/checksum0/go-electrum/electrum"
	gomock "go.uber.org/mock/gomock"
)

// MockRPC is a mock of RPC interface.
type MockRPC struct {
	ctrl     *gomock.Controller
	recorder *MockRPCMockRecorder
}

// MockRPCMockRecorder is the mock recorder for MockRPC.
type MockRPCMockRecorder struct {
	mock *MockRPC
}

// NewMockRPC creates a new mock instance.
func NewMockRPC(ctrl *gomock.Controller) *MockRPC {
	mock := &MockRPC{ctrl: ctrl}
	mock.recorder = &MockRPCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPC) EXPECT() *MockRPCMockRecorder {
	return m.recorder
}

// BroadcastTransaction mocks base method.
func (m *MockRPC) BroadcastTransaction(ctx context.Context, rawTx string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastTransaction", ctx, rawTx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastTransaction indicates an expected call of BroadcastTransaction.
func (mr *MockRPCMockRecorder) BroadcastTransaction(ctx, rawTx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTransaction", reflect.TypeOf((*MockRPC)(nil).BroadcastTransaction), ctx, rawTx)
}

// GetFee mocks base method.
func (m *MockRPC) GetFee(ctx context.Context, target uint32) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFee", ctx, target)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFee indicates an expected call of GetFee.
func (mr *MockRPCMockRecorder) GetFee(ctx, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFee", reflect.TypeOf((*MockRPC)(nil).GetFee), ctx, target)
}

// GetHistory mocks base method.
func (m *MockRPC) GetHistory(ctx context.Context, scripthash string) ([]*electrum.GetMempoolResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", ctx, scripthash)
	ret0, _ := ret[0].([]*electrum.GetMempoolResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockRPCMockRecorder) GetHistory(ctx, scripthash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockRPC)(nil).GetHistory), ctx, scripthash)
}

// GetRawTransaction mocks base method.
func (m *MockRPC) GetRawTransaction(ctx context.Context, txHash string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawTransaction", ctx, txHash)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransaction indicates an expected call of GetRawTransaction.
func (mr *MockRPCMockRecorder) GetRawTransaction(ctx, txHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransaction", reflect.TypeOf((*MockRPC)(nil).GetRawTransaction), ctx, txHash)
}

// Ping mocks base method.
func (m *MockRPC) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRPCMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRPC)(nil).Ping), ctx)
}

// SubscribeHeaders mocks base method.
func (m *MockRPC) SubscribeHeaders(ctx context.Context) (<-chan *electrum.SubscribeHeadersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeHeaders", ctx)
	ret0, _ := ret[0].(<-chan *electrum.SubscribeHeadersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeHeaders indicates an expected call of SubscribeHeaders.
func (mr *MockRPCMockRecorder) SubscribeHeaders(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeHeaders", reflect.TypeOf((*MockRPC)(nil).SubscribeHeaders), ctx)
}
