// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/elementsproject/peerswap/peersync (interfaces: LightningClient)
//
// Generated by this command:
//
//	mockgen -destination=peersync/mocks/mock_lightning_client.go -package=mocks github.com/elementsproject/peerswap/peersync LightningClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	lnrpc "github.com/lightningnetwork/lnd/lnrpc"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockLightningClient is a mock of LightningClient interface.
type MockLightningClient struct {
	ctrl     *gomock.Controller
	recorder *MockLightningClientMockRecorder
}

// MockLightningClientMockRecorder is the mock recorder for MockLightningClient.
type MockLightningClientMockRecorder struct {
	mock *MockLightningClient
}

// NewMockLightningClient creates a new mock instance.
func NewMockLightningClient(ctrl *gomock.Controller) *MockLightningClient {
	mock := &MockLightningClient{ctrl: ctrl}
	mock.recorder = &MockLightningClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLightningClient) EXPECT() *MockLightningClientMockRecorder {
	return m.recorder
}

// ListPeers mocks base method.
func (m *MockLightningClient) ListPeers(arg0 context.Context, arg1 *lnrpc.ListPeersRequest, arg2 ...grpc.CallOption) (*lnrpc.ListPeersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPeers", varargs...)
	ret0, _ := ret[0].(*lnrpc.ListPeersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPeers indicates an expected call of ListPeers.
func (mr *MockLightningClientMockRecorder) ListPeers(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPeers", reflect.TypeOf((*MockLightningClient)(nil).ListPeers), varargs...)
}

// SendCustomMessage mocks base method.
func (m *MockLightningClient) SendCustomMessage(arg0 context.Context, arg1 *lnrpc.SendCustomMessageRequest, arg2 ...grpc.CallOption) (*lnrpc.SendCustomMessageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendCustomMessage", varargs...)
	ret0, _ := ret[0].(*lnrpc.SendCustomMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCustomMessage indicates an expected call of SendCustomMessage.
func (mr *MockLightningClientMockRecorder) SendCustomMessage(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCustomMessage", reflect.TypeOf((*MockLightningClient)(nil).SendCustomMessage), varargs...)
}

// SubscribeCustomMessages mocks base method.
func (m *MockLightningClient) SubscribeCustomMessages(arg0 context.Context, arg1 *lnrpc.SubscribeCustomMessagesRequest, arg2 ...grpc.CallOption) (lnrpc.Lightning_SubscribeCustomMessagesClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeCustomMessages", varargs...)
	ret0, _ := ret[0].(lnrpc.Lightning_SubscribeCustomMessagesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeCustomMessages indicates an expected call of SubscribeCustomMessages.
func (mr *MockLightningClientMockRecorder) SubscribeCustomMessages(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeCustomMessages", reflect.TypeOf((*MockLightningClient)(nil).SubscribeCustomMessages), varargs...)
}
