// Code generated by MockGen. DO NOT EDIT.
// Source: lwk/electrumRPC.go
//
// Generated by this command:
//
//	mockgen -source=lwk/electrumRPC.go -destination=lwk/mock/electrumRPC.go
//

// Package mock_txwatcher is a generated GoMock package.
package mock_txwatcher

import (
	context "context"
	reflect "reflect"

	electrum "github.com/checksum0/go-electrum/electrum"
	gomock "go.uber.org/mock/gomock"
)

// MockelectrumRPC is a mock of electrumRPC interface.
type MockelectrumRPC struct {
	ctrl     *gomock.Controller
	recorder *MockelectrumRPCMockRecorder
}

// MockelectrumRPCMockRecorder is the mock recorder for MockelectrumRPC.
type MockelectrumRPCMockRecorder struct {
	mock *MockelectrumRPC
}

// NewMockelectrumRPC creates a new mock instance.
func NewMockelectrumRPC(ctrl *gomock.Controller) *MockelectrumRPC {
	mock := &MockelectrumRPC{ctrl: ctrl}
	mock.recorder = &MockelectrumRPCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockelectrumRPC) EXPECT() *MockelectrumRPCMockRecorder {
	return m.recorder
}

// GetHistory mocks base method.
func (m *MockelectrumRPC) GetHistory(ctx context.Context, scripthash string) ([]*electrum.GetMempoolResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", ctx, scripthash)
	ret0, _ := ret[0].([]*electrum.GetMempoolResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockelectrumRPCMockRecorder) GetHistory(ctx, scripthash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockelectrumRPC)(nil).GetHistory), ctx, scripthash)
}

// GetRawTransaction mocks base method.
func (m *MockelectrumRPC) GetRawTransaction(ctx context.Context, txHash string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawTransaction", ctx, txHash)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransaction indicates an expected call of GetRawTransaction.
func (mr *MockelectrumRPCMockRecorder) GetRawTransaction(ctx, txHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransaction", reflect.TypeOf((*MockelectrumRPC)(nil).GetRawTransaction), ctx, txHash)
}

// SubscribeHeaders mocks base method.
func (m *MockelectrumRPC) SubscribeHeaders(ctx context.Context) (<-chan *electrum.SubscribeHeadersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeHeaders", ctx)
	ret0, _ := ret[0].(<-chan *electrum.SubscribeHeadersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeHeaders indicates an expected call of SubscribeHeaders.
func (mr *MockelectrumRPCMockRecorder) SubscribeHeaders(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeHeaders", reflect.TypeOf((*MockelectrumRPC)(nil).SubscribeHeaders), ctx)
}
