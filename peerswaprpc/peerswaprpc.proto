syntax = "proto3";

package peerswap;

option go_package = "github.com/elementsproject/peerswap/peerswaprpc";

service PeerSwap {
    rpc SwapOut(SwapOutRequest) returns (SwapResponse);
    rpc SwapIn(SwapInRequest) returns (SwapResponse);
    rpc GetSwap(GetSwapRequest) returns (SwapResponse);
    rpc ListSwaps(ListSwapsRequest) returns (ListSwapsResponse);
    rpc ListPeers(ListPeersRequest) returns (ListPeersResponse);
    rpc ListRequestedSwaps(ListRequestedSwapsRequest)
        returns (ListRequestedSwapsResponse);
    rpc ListActiveSwaps(ListSwapsRequest) returns (ListSwapsResponse);

    // policy
    rpc AllowSwapRequests(AllowSwapRequestsRequest) returns (Policy);
    rpc ReloadPolicyFile(ReloadPolicyFileRequest) returns (Policy);
    rpc AddPeer(AddPeerRequest) returns (Policy);
    rpc RemovePeer(RemovePeerRequest) returns (Policy);
    rpc AddSusPeer(AddPeerRequest) returns (Policy);
    rpc RemoveSusPeer(RemovePeerRequest) returns (Policy);

    // Liquid Stuff
    rpc LiquidGetAddress(GetAddressRequest) returns (GetAddressResponse);
    rpc LiquidGetBalance(GetBalanceRequest) returns (GetBalanceResponse);
    rpc LiquidSendToAddress(SendToAddressRequest)
        returns (SendToAddressResponse);

    rpc Stop(Empty) returns (Empty);
}

message GetAddressRequest {}

message GetAddressResponse {
    string address = 1;
}

message GetBalanceRequest {}

message GetBalanceResponse {
    uint64 sat_amount = 1;
}

message SendToAddressRequest {
    string address    = 1;
    uint64 sat_amount = 2;
}

message SendToAddressResponse {
    string tx_id = 1;
}

message SwapOutRequest {
    uint64 channel_id   = 1;
    uint64 swap_amount  = 2;
    string asset        = 3;
    bool force          = 4;
    int64 premium_limit = 5;
}

message SwapOutResponse {
    PrettyPrintSwap swap = 1;
}

message SwapInRequest {
    uint64 channel_id   = 1;
    uint64 swap_amount  = 2;
    string asset        = 3;
    bool force          = 4;
    int64 premium_limit = 5;
}

message SwapResponse {
    PrettyPrintSwap swap = 1;
}

message GetSwapRequest {
    string swap_id = 1;
}

message ListSwapsRequest {}

message ListSwapsResponse {
    repeated PrettyPrintSwap swaps = 1;
}

message ListPeersRequest {}

message ListPeersResponse {
    repeated PeerSwapPeer peers = 1;
}

message ReloadPolicyFileRequest {}

message AddPeerRequest {
    string peer_pubkey = 1;
}

message RemovePeerRequest {
    string peer_pubkey = 1;
}

message ListRequestedSwapsRequest {}

message ListRequestedSwapsResponse {
    map<string, RequestSwapList> requested_swaps = 1;
}

message RequestSwapList {
    repeated RequestedSwap requested_swaps = 1;
}

message RequestedSwap {
    string asset            = 1;
    uint64 amount_sat       = 2;
    SwapType swap_type      = 3;
    string rejection_reason = 4;

    enum SwapType {
        SWAP_IN  = 0;
        SWAP_OUT = 1;
    }
}

message PrettyPrintSwap {
    string id                = 1;
    int64 created_at         = 2;
    string asset             = 3;
    string type              = 4;
    string role              = 5;
    string state             = 6;
    string initiator_node_id = 7;
    string peer_node_id      = 8;
    uint64 amount            = 9;
    string channel_id        = 10;
    string opening_tx_id     = 11;
    string claim_tx_id       = 12;
    string cancel_message    = 13;
    uint64 lnd_chan_id       = 14;
    int64 premium_amount     = 15;
}

message PeerSwapPeer {
    string node_id                        = 1;
    bool swaps_allowed                    = 2;
    repeated string supported_assets      = 3;
    repeated PeerSwapPeerChannel channels = 4;
    SwapStats as_sender                   = 5;
    SwapStats as_receiver                 = 6;
    uint64 paid_fee                       = 7;
    int64 swap_in_premium_rate_ppm        = 8;
    int64 swap_out_premium_rate_ppm       = 9;
}

message PeerSwapPeerChannel {
    uint64 channel_id     = 1;
    uint64 local_balance  = 2;
    uint64 remote_balance = 3;
    bool active           = 5;
}

message SwapStats {
    uint64 swaps_out = 1;
    uint64 swaps_in  = 2;
    uint64 sats_out  = 3;
    uint64 sats_in   = 4;
}

message PeerSwapNodes {
    string node_id = 1;
}

message Policy {
    uint64 reserve_onchain_msat          = 1;
    uint64 min_swap_amount_msat          = 2;
    bool accept_all_peers                = 3;
    bool allow_new_swaps                 = 4;
    repeated string allowlisted_peers    = 5;
    repeated string suspicious_peer_list = 6;
    int64 swap_in_premium_rate_ppm       = 7;
    int64 swap_out_premium_rate_ppm      = 8;
}

message AllowSwapRequestsRequest {
    bool allow = 1;
}

message AllowSwapRequestsResponse {
    bool allow = 1;
}

message Empty {}
