// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: peerswaprpc.proto

package peerswaprpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RequestedSwap_SwapType int32

const (
	RequestedSwap_SWAP_IN  RequestedSwap_SwapType = 0
	RequestedSwap_SWAP_OUT RequestedSwap_SwapType = 1
)

// Enum value maps for RequestedSwap_SwapType.
var (
	RequestedSwap_SwapType_name = map[int32]string{
		0: "SWAP_IN",
		1: "SWAP_OUT",
	}
	RequestedSwap_SwapType_value = map[string]int32{
		"SWAP_IN":  0,
		"SWAP_OUT": 1,
	}
)

func (x RequestedSwap_SwapType) Enum() *RequestedSwap_SwapType {
	p := new(RequestedSwap_SwapType)
	*p = x
	return p
}

func (x RequestedSwap_SwapType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestedSwap_SwapType) Descriptor() protoreflect.EnumDescriptor {
	return file_peerswaprpc_proto_enumTypes[0].Descriptor()
}

func (RequestedSwap_SwapType) Type() protoreflect.EnumType {
	return &file_peerswaprpc_proto_enumTypes[0]
}

func (x RequestedSwap_SwapType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestedSwap_SwapType.Descriptor instead.
func (RequestedSwap_SwapType) EnumDescriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{21, 0}
}

type GetAddressRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAddressRequest) Reset() {
	*x = GetAddressRequest{}
	mi := &file_peerswaprpc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressRequest) ProtoMessage() {}

func (x *GetAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressRequest.ProtoReflect.Descriptor instead.
func (*GetAddressRequest) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{0}
}

type GetAddressResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAddressResponse) Reset() {
	*x = GetAddressResponse{}
	mi := &file_peerswaprpc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressResponse) ProtoMessage() {}

func (x *GetAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressResponse.ProtoReflect.Descriptor instead.
func (*GetAddressResponse) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{1}
}

func (x *GetAddressResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetBalanceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBalanceRequest) Reset() {
	*x = GetBalanceRequest{}
	mi := &file_peerswaprpc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceRequest) ProtoMessage() {}

func (x *GetBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetBalanceRequest) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{2}
}

type GetBalanceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SatAmount     uint64                 `protobuf:"varint,1,opt,name=sat_amount,json=satAmount,proto3" json:"sat_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBalanceResponse) Reset() {
	*x = GetBalanceResponse{}
	mi := &file_peerswaprpc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceResponse) ProtoMessage() {}

func (x *GetBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetBalanceResponse) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{3}
}

func (x *GetBalanceResponse) GetSatAmount() uint64 {
	if x != nil {
		return x.SatAmount
	}
	return 0
}

type SendToAddressRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	SatAmount     uint64                 `protobuf:"varint,2,opt,name=sat_amount,json=satAmount,proto3" json:"sat_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendToAddressRequest) Reset() {
	*x = SendToAddressRequest{}
	mi := &file_peerswaprpc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendToAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendToAddressRequest) ProtoMessage() {}

func (x *SendToAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendToAddressRequest.ProtoReflect.Descriptor instead.
func (*SendToAddressRequest) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{4}
}

func (x *SendToAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SendToAddressRequest) GetSatAmount() uint64 {
	if x != nil {
		return x.SatAmount
	}
	return 0
}

type SendToAddressResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxId          string                 `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendToAddressResponse) Reset() {
	*x = SendToAddressResponse{}
	mi := &file_peerswaprpc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendToAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendToAddressResponse) ProtoMessage() {}

func (x *SendToAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendToAddressResponse.ProtoReflect.Descriptor instead.
func (*SendToAddressResponse) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{5}
}

func (x *SendToAddressResponse) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

type SwapOutRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     uint64                 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	SwapAmount    uint64                 `protobuf:"varint,2,opt,name=swap_amount,json=swapAmount,proto3" json:"swap_amount,omitempty"`
	Asset         string                 `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
	Force         bool                   `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwapOutRequest) Reset() {
	*x = SwapOutRequest{}
	mi := &file_peerswaprpc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwapOutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapOutRequest) ProtoMessage() {}

func (x *SwapOutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapOutRequest.ProtoReflect.Descriptor instead.
func (*SwapOutRequest) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{6}
}

func (x *SwapOutRequest) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *SwapOutRequest) GetSwapAmount() uint64 {
	if x != nil {
		return x.SwapAmount
	}
	return 0
}

func (x *SwapOutRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *SwapOutRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type SwapOutResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Swap          *PrettyPrintSwap       `protobuf:"bytes,1,opt,name=swap,proto3" json:"swap,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwapOutResponse) Reset() {
	*x = SwapOutResponse{}
	mi := &file_peerswaprpc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwapOutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapOutResponse) ProtoMessage() {}

func (x *SwapOutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapOutResponse.ProtoReflect.Descriptor instead.
func (*SwapOutResponse) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{7}
}

func (x *SwapOutResponse) GetSwap() *PrettyPrintSwap {
	if x != nil {
		return x.Swap
	}
	return nil
}

type SwapInRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     uint64                 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	SwapAmount    uint64                 `protobuf:"varint,2,opt,name=swap_amount,json=swapAmount,proto3" json:"swap_amount,omitempty"`
	Asset         string                 `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
	Force         bool                   `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwapInRequest) Reset() {
	*x = SwapInRequest{}
	mi := &file_peerswaprpc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwapInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapInRequest) ProtoMessage() {}

func (x *SwapInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapInRequest.ProtoReflect.Descriptor instead.
func (*SwapInRequest) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{8}
}

func (x *SwapInRequest) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *SwapInRequest) GetSwapAmount() uint64 {
	if x != nil {
		return x.SwapAmount
	}
	return 0
}

func (x *SwapInRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *SwapInRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type SwapResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Swap          *PrettyPrintSwap       `protobuf:"bytes,1,opt,name=swap,proto3" json:"swap,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwapResponse) Reset() {
	*x = SwapResponse{}
	mi := &file_peerswaprpc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapResponse) ProtoMessage() {}

func (x *SwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapResponse.ProtoReflect.Descriptor instead.
func (*SwapResponse) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{9}
}

func (x *SwapResponse) GetSwap() *PrettyPrintSwap {
	if x != nil {
		return x.Swap
	}
	return nil
}

type GetSwapRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SwapId        string                 `protobuf:"bytes,1,opt,name=swap_id,json=swapId,proto3" json:"swap_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSwapRequest) Reset() {
	*x = GetSwapRequest{}
	mi := &file_peerswaprpc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwapRequest) ProtoMessage() {}

func (x *GetSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwapRequest.ProtoReflect.Descriptor instead.
func (*GetSwapRequest) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{10}
}

func (x *GetSwapRequest) GetSwapId() string {
	if x != nil {
		return x.SwapId
	}
	return ""
}

type ListSwapsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSwapsRequest) Reset() {
	*x = ListSwapsRequest{}
	mi := &file_peerswaprpc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSwapsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSwapsRequest) ProtoMessage() {}

func (x *ListSwapsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSwapsRequest.ProtoReflect.Descriptor instead.
func (*ListSwapsRequest) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{11}
}

type ListSwapsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Swaps         []*PrettyPrintSwap     `protobuf:"bytes,1,rep,name=swaps,proto3" json:"swaps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSwapsResponse) Reset() {
	*x = ListSwapsResponse{}
	mi := &file_peerswaprpc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSwapsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSwapsResponse) ProtoMessage() {}

func (x *ListSwapsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSwapsResponse.ProtoReflect.Descriptor instead.
func (*ListSwapsResponse) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{12}
}

func (x *ListSwapsResponse) GetSwaps() []*PrettyPrintSwap {
	if x != nil {
		return x.Swaps
	}
	return nil
}

type ListPeersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPeersRequest) Reset() {
	*x = ListPeersRequest{}
	mi := &file_peerswaprpc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPeersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPeersRequest) ProtoMessage() {}

func (x *ListPeersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPeersRequest.ProtoReflect.Descriptor instead.
func (*ListPeersRequest) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{13}
}

type ListPeersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Peers         []*PeerSwapPeer        `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPeersResponse) Reset() {
	*x = ListPeersResponse{}
	mi := &file_peerswaprpc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPeersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPeersResponse) ProtoMessage() {}

func (x *ListPeersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPeersResponse.ProtoReflect.Descriptor instead.
func (*ListPeersResponse) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{14}
}

func (x *ListPeersResponse) GetPeers() []*PeerSwapPeer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type ReloadPolicyFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReloadPolicyFileRequest) Reset() {
	*x = ReloadPolicyFileRequest{}
	mi := &file_peerswaprpc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReloadPolicyFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadPolicyFileRequest) ProtoMessage() {}

func (x *ReloadPolicyFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadPolicyFileRequest.ProtoReflect.Descriptor instead.
func (*ReloadPolicyFileRequest) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{15}
}

type AddPeerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PeerPubkey    string                 `protobuf:"bytes,1,opt,name=peer_pubkey,json=peerPubkey,proto3" json:"peer_pubkey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddPeerRequest) Reset() {
	*x = AddPeerRequest{}
	mi := &file_peerswaprpc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPeerRequest) ProtoMessage() {}

func (x *AddPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPeerRequest.ProtoReflect.Descriptor instead.
func (*AddPeerRequest) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{16}
}

func (x *AddPeerRequest) GetPeerPubkey() string {
	if x != nil {
		return x.PeerPubkey
	}
	return ""
}

type RemovePeerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PeerPubkey    string                 `protobuf:"bytes,1,opt,name=peer_pubkey,json=peerPubkey,proto3" json:"peer_pubkey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemovePeerRequest) Reset() {
	*x = RemovePeerRequest{}
	mi := &file_peerswaprpc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemovePeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePeerRequest) ProtoMessage() {}

func (x *RemovePeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePeerRequest.ProtoReflect.Descriptor instead.
func (*RemovePeerRequest) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{17}
}

func (x *RemovePeerRequest) GetPeerPubkey() string {
	if x != nil {
		return x.PeerPubkey
	}
	return ""
}

type ListRequestedSwapsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRequestedSwapsRequest) Reset() {
	*x = ListRequestedSwapsRequest{}
	mi := &file_peerswaprpc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRequestedSwapsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequestedSwapsRequest) ProtoMessage() {}

func (x *ListRequestedSwapsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequestedSwapsRequest.ProtoReflect.Descriptor instead.
func (*ListRequestedSwapsRequest) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{18}
}

type ListRequestedSwapsResponse struct {
	state          protoimpl.MessageState      `protogen:"open.v1"`
	RequestedSwaps map[string]*RequestSwapList `protobuf:"bytes,1,rep,name=requested_swaps,json=requestedSwaps,proto3" json:"requested_swaps,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListRequestedSwapsResponse) Reset() {
	*x = ListRequestedSwapsResponse{}
	mi := &file_peerswaprpc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRequestedSwapsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequestedSwapsResponse) ProtoMessage() {}

func (x *ListRequestedSwapsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequestedSwapsResponse.ProtoReflect.Descriptor instead.
func (*ListRequestedSwapsResponse) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{19}
}

func (x *ListRequestedSwapsResponse) GetRequestedSwaps() map[string]*RequestSwapList {
	if x != nil {
		return x.RequestedSwaps
	}
	return nil
}

type RequestSwapList struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RequestedSwaps []*RequestedSwap       `protobuf:"bytes,1,rep,name=requested_swaps,json=requestedSwaps,proto3" json:"requested_swaps,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RequestSwapList) Reset() {
	*x = RequestSwapList{}
	mi := &file_peerswaprpc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestSwapList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSwapList) ProtoMessage() {}

func (x *RequestSwapList) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSwapList.ProtoReflect.Descriptor instead.
func (*RequestSwapList) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{20}
}

func (x *RequestSwapList) GetRequestedSwaps() []*RequestedSwap {
	if x != nil {
		return x.RequestedSwaps
	}
	return nil
}

type RequestedSwap struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Asset           string                 `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	AmountSat       uint64                 `protobuf:"varint,2,opt,name=amount_sat,json=amountSat,proto3" json:"amount_sat,omitempty"`
	SwapType        RequestedSwap_SwapType `protobuf:"varint,3,opt,name=swap_type,json=swapType,proto3,enum=peerswap.RequestedSwap_SwapType" json:"swap_type,omitempty"`
	RejectionReason string                 `protobuf:"bytes,4,opt,name=rejection_reason,json=rejectionReason,proto3" json:"rejection_reason,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RequestedSwap) Reset() {
	*x = RequestedSwap{}
	mi := &file_peerswaprpc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestedSwap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestedSwap) ProtoMessage() {}

func (x *RequestedSwap) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestedSwap.ProtoReflect.Descriptor instead.
func (*RequestedSwap) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{21}
}

func (x *RequestedSwap) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *RequestedSwap) GetAmountSat() uint64 {
	if x != nil {
		return x.AmountSat
	}
	return 0
}

func (x *RequestedSwap) GetSwapType() RequestedSwap_SwapType {
	if x != nil {
		return x.SwapType
	}
	return RequestedSwap_SWAP_IN
}

func (x *RequestedSwap) GetRejectionReason() string {
	if x != nil {
		return x.RejectionReason
	}
	return ""
}

type PrettyPrintSwap struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt       int64                  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Asset           string                 `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
	Type            string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Role            string                 `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
	State           string                 `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	InitiatorNodeId string                 `protobuf:"bytes,7,opt,name=initiator_node_id,json=initiatorNodeId,proto3" json:"initiator_node_id,omitempty"`
	PeerNodeId      string                 `protobuf:"bytes,8,opt,name=peer_node_id,json=peerNodeId,proto3" json:"peer_node_id,omitempty"`
	Amount          uint64                 `protobuf:"varint,9,opt,name=amount,proto3" json:"amount,omitempty"`
	ChannelId       string                 `protobuf:"bytes,10,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	OpeningTxId     string                 `protobuf:"bytes,11,opt,name=opening_tx_id,json=openingTxId,proto3" json:"opening_tx_id,omitempty"`
	ClaimTxId       string                 `protobuf:"bytes,12,opt,name=claim_tx_id,json=claimTxId,proto3" json:"claim_tx_id,omitempty"`
	CancelMessage   string                 `protobuf:"bytes,13,opt,name=cancel_message,json=cancelMessage,proto3" json:"cancel_message,omitempty"`
	LndChanId       uint64                 `protobuf:"varint,14,opt,name=lnd_chan_id,json=lndChanId,proto3" json:"lnd_chan_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PrettyPrintSwap) Reset() {
	*x = PrettyPrintSwap{}
	mi := &file_peerswaprpc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrettyPrintSwap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrettyPrintSwap) ProtoMessage() {}

func (x *PrettyPrintSwap) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrettyPrintSwap.ProtoReflect.Descriptor instead.
func (*PrettyPrintSwap) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{22}
}

func (x *PrettyPrintSwap) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PrettyPrintSwap) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PrettyPrintSwap) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *PrettyPrintSwap) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PrettyPrintSwap) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *PrettyPrintSwap) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PrettyPrintSwap) GetInitiatorNodeId() string {
	if x != nil {
		return x.InitiatorNodeId
	}
	return ""
}

func (x *PrettyPrintSwap) GetPeerNodeId() string {
	if x != nil {
		return x.PeerNodeId
	}
	return ""
}

func (x *PrettyPrintSwap) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PrettyPrintSwap) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *PrettyPrintSwap) GetOpeningTxId() string {
	if x != nil {
		return x.OpeningTxId
	}
	return ""
}

func (x *PrettyPrintSwap) GetClaimTxId() string {
	if x != nil {
		return x.ClaimTxId
	}
	return ""
}

func (x *PrettyPrintSwap) GetCancelMessage() string {
	if x != nil {
		return x.CancelMessage
	}
	return ""
}

func (x *PrettyPrintSwap) GetLndChanId() uint64 {
	if x != nil {
		return x.LndChanId
	}
	return 0
}

type PeerSwapPeer struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	NodeId          string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	SwapsAllowed    bool                   `protobuf:"varint,2,opt,name=swaps_allowed,json=swapsAllowed,proto3" json:"swaps_allowed,omitempty"`
	SupportedAssets []string               `protobuf:"bytes,3,rep,name=supported_assets,json=supportedAssets,proto3" json:"supported_assets,omitempty"`
	Channels        []*PeerSwapPeerChannel `protobuf:"bytes,4,rep,name=channels,proto3" json:"channels,omitempty"`
	AsSender        *SwapStats             `protobuf:"bytes,5,opt,name=as_sender,json=asSender,proto3" json:"as_sender,omitempty"`
	AsReceiver      *SwapStats             `protobuf:"bytes,6,opt,name=as_receiver,json=asReceiver,proto3" json:"as_receiver,omitempty"`
	PaidFee         uint64                 `protobuf:"varint,7,opt,name=paid_fee,json=paidFee,proto3" json:"paid_fee,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PeerSwapPeer) Reset() {
	*x = PeerSwapPeer{}
	mi := &file_peerswaprpc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerSwapPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerSwapPeer) ProtoMessage() {}

func (x *PeerSwapPeer) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerSwapPeer.ProtoReflect.Descriptor instead.
func (*PeerSwapPeer) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{23}
}

func (x *PeerSwapPeer) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PeerSwapPeer) GetSwapsAllowed() bool {
	if x != nil {
		return x.SwapsAllowed
	}
	return false
}

func (x *PeerSwapPeer) GetSupportedAssets() []string {
	if x != nil {
		return x.SupportedAssets
	}
	return nil
}

func (x *PeerSwapPeer) GetChannels() []*PeerSwapPeerChannel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *PeerSwapPeer) GetAsSender() *SwapStats {
	if x != nil {
		return x.AsSender
	}
	return nil
}

func (x *PeerSwapPeer) GetAsReceiver() *SwapStats {
	if x != nil {
		return x.AsReceiver
	}
	return nil
}

func (x *PeerSwapPeer) GetPaidFee() uint64 {
	if x != nil {
		return x.PaidFee
	}
	return 0
}

type PeerSwapPeerChannel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     uint64                 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	LocalBalance  uint64                 `protobuf:"varint,2,opt,name=local_balance,json=localBalance,proto3" json:"local_balance,omitempty"`
	RemoteBalance uint64                 `protobuf:"varint,3,opt,name=remote_balance,json=remoteBalance,proto3" json:"remote_balance,omitempty"`
	Active        bool                   `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeerSwapPeerChannel) Reset() {
	*x = PeerSwapPeerChannel{}
	mi := &file_peerswaprpc_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerSwapPeerChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerSwapPeerChannel) ProtoMessage() {}

func (x *PeerSwapPeerChannel) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerSwapPeerChannel.ProtoReflect.Descriptor instead.
func (*PeerSwapPeerChannel) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{24}
}

func (x *PeerSwapPeerChannel) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *PeerSwapPeerChannel) GetLocalBalance() uint64 {
	if x != nil {
		return x.LocalBalance
	}
	return 0
}

func (x *PeerSwapPeerChannel) GetRemoteBalance() uint64 {
	if x != nil {
		return x.RemoteBalance
	}
	return 0
}

func (x *PeerSwapPeerChannel) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type SwapStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SwapsOut      uint64                 `protobuf:"varint,1,opt,name=swaps_out,json=swapsOut,proto3" json:"swaps_out,omitempty"`
	SwapsIn       uint64                 `protobuf:"varint,2,opt,name=swaps_in,json=swapsIn,proto3" json:"swaps_in,omitempty"`
	SatsOut       uint64                 `protobuf:"varint,3,opt,name=sats_out,json=satsOut,proto3" json:"sats_out,omitempty"`
	SatsIn        uint64                 `protobuf:"varint,4,opt,name=sats_in,json=satsIn,proto3" json:"sats_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwapStats) Reset() {
	*x = SwapStats{}
	mi := &file_peerswaprpc_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwapStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapStats) ProtoMessage() {}

func (x *SwapStats) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapStats.ProtoReflect.Descriptor instead.
func (*SwapStats) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{25}
}

func (x *SwapStats) GetSwapsOut() uint64 {
	if x != nil {
		return x.SwapsOut
	}
	return 0
}

func (x *SwapStats) GetSwapsIn() uint64 {
	if x != nil {
		return x.SwapsIn
	}
	return 0
}

func (x *SwapStats) GetSatsOut() uint64 {
	if x != nil {
		return x.SatsOut
	}
	return 0
}

func (x *SwapStats) GetSatsIn() uint64 {
	if x != nil {
		return x.SatsIn
	}
	return 0
}

type PeerSwapNodes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeerSwapNodes) Reset() {
	*x = PeerSwapNodes{}
	mi := &file_peerswaprpc_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerSwapNodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerSwapNodes) ProtoMessage() {}

func (x *PeerSwapNodes) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerSwapNodes.ProtoReflect.Descriptor instead.
func (*PeerSwapNodes) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{26}
}

func (x *PeerSwapNodes) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type Policy struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ReserveOnchainMsat uint64                 `protobuf:"varint,1,opt,name=reserve_onchain_msat,json=reserveOnchainMsat,proto3" json:"reserve_onchain_msat,omitempty"`
	MinSwapAmountMsat  uint64                 `protobuf:"varint,2,opt,name=min_swap_amount_msat,json=minSwapAmountMsat,proto3" json:"min_swap_amount_msat,omitempty"`
	AcceptAllPeers     bool                   `protobuf:"varint,3,opt,name=accept_all_peers,json=acceptAllPeers,proto3" json:"accept_all_peers,omitempty"`
	AllowNewSwaps      bool                   `protobuf:"varint,4,opt,name=allow_new_swaps,json=allowNewSwaps,proto3" json:"allow_new_swaps,omitempty"`
	AllowlistedPeers   []string               `protobuf:"bytes,5,rep,name=allowlisted_peers,json=allowlistedPeers,proto3" json:"allowlisted_peers,omitempty"`
	SuspiciousPeerList []string               `protobuf:"bytes,6,rep,name=suspicious_peer_list,json=suspiciousPeerList,proto3" json:"suspicious_peer_list,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Policy) Reset() {
	*x = Policy{}
	mi := &file_peerswaprpc_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{27}
}

func (x *Policy) GetReserveOnchainMsat() uint64 {
	if x != nil {
		return x.ReserveOnchainMsat
	}
	return 0
}

func (x *Policy) GetMinSwapAmountMsat() uint64 {
	if x != nil {
		return x.MinSwapAmountMsat
	}
	return 0
}

func (x *Policy) GetAcceptAllPeers() bool {
	if x != nil {
		return x.AcceptAllPeers
	}
	return false
}

func (x *Policy) GetAllowNewSwaps() bool {
	if x != nil {
		return x.AllowNewSwaps
	}
	return false
}

func (x *Policy) GetAllowlistedPeers() []string {
	if x != nil {
		return x.AllowlistedPeers
	}
	return nil
}

func (x *Policy) GetSuspiciousPeerList() []string {
	if x != nil {
		return x.SuspiciousPeerList
	}
	return nil
}

type AllowSwapRequestsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Allow         bool                   `protobuf:"varint,1,opt,name=allow,proto3" json:"allow,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AllowSwapRequestsRequest) Reset() {
	*x = AllowSwapRequestsRequest{}
	mi := &file_peerswaprpc_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllowSwapRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowSwapRequestsRequest) ProtoMessage() {}

func (x *AllowSwapRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowSwapRequestsRequest.ProtoReflect.Descriptor instead.
func (*AllowSwapRequestsRequest) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{28}
}

func (x *AllowSwapRequestsRequest) GetAllow() bool {
	if x != nil {
		return x.Allow
	}
	return false
}

type AllowSwapRequestsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Allow         bool                   `protobuf:"varint,1,opt,name=allow,proto3" json:"allow,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AllowSwapRequestsResponse) Reset() {
	*x = AllowSwapRequestsResponse{}
	mi := &file_peerswaprpc_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllowSwapRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowSwapRequestsResponse) ProtoMessage() {}

func (x *AllowSwapRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowSwapRequestsResponse.ProtoReflect.Descriptor instead.
func (*AllowSwapRequestsResponse) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{29}
}

func (x *AllowSwapRequestsResponse) GetAllow() bool {
	if x != nil {
		return x.Allow
	}
	return false
}

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_peerswaprpc_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_peerswaprpc_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_peerswaprpc_proto_rawDescGZIP(), []int{30}
}

var File_peerswaprpc_proto protoreflect.FileDescriptor

var file_peerswaprpc_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x22, 0x13, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x2e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x61, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x61, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4f, 0x0a, 0x14,
	0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x61, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x73, 0x61, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2c, 0x0a,
	0x15, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x0e, 0x53,
	0x77, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x40, 0x0a, 0x0f, 0x53, 0x77, 0x61,
	0x70, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04,
	0x73, 0x77, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x65,
	0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x53, 0x77, 0x61, 0x70, 0x52, 0x04, 0x73, 0x77, 0x61, 0x70, 0x22, 0x7b, 0x0a, 0x0d, 0x53,
	0x77, 0x61, 0x70, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x3d, 0x0a, 0x0c, 0x53, 0x77, 0x61, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61,
	0x70, 0x2e, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x77, 0x61,
	0x70, 0x52, 0x04, 0x73, 0x77, 0x61, 0x70, 0x22, 0x29, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x77,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x77, 0x61, 0x70,
	0x49, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77,
	0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73,
	0x77, 0x61, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x65,
	0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x53, 0x77, 0x61, 0x70, 0x52, 0x05, 0x73, 0x77, 0x61, 0x70, 0x73, 0x22, 0x12, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x41, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x31,
	0x0a, 0x0e, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x22, 0x34, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x70,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x1b, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x77, 0x61, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x77, 0x61, 0x70,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x53, 0x77, 0x61, 0x70, 0x73, 0x1a, 0x5c, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x53, 0x77, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x77, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x53, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x77, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x77, 0x61, 0x70, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x53, 0x77, 0x61, 0x70, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x0d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x77, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x61, 0x74,
	0x12, 0x3d, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x53, 0x77, 0x61,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x25, 0x0a, 0x08, 0x53, 0x77,
	0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x4f, 0x55, 0x54, 0x10,
	0x01, 0x22, 0xa4, 0x03, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x53, 0x77, 0x61, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x78, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x6e, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c,
	0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x22, 0xb5, 0x02, 0x0a, 0x0c, 0x50, 0x65, 0x65,
	0x72, 0x53, 0x77, 0x61, 0x70, 0x50, 0x65, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x77, 0x61, 0x70, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x50, 0x65, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x30, 0x0a,
	0x09, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x53, 0x77, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x08, 0x61, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x0b, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e,
	0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x61, 0x73, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x61, 0x69, 0x64, 0x46, 0x65, 0x65,
	0x22, 0x98, 0x01, 0x0a, 0x13, 0x50, 0x65, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x50, 0x65, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x77, 0x0a, 0x09, 0x53,
	0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x77, 0x61,
	0x70, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x77, 0x61, 0x70, 0x73, 0x5f, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x77, 0x61, 0x70, 0x73, 0x49, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x73, 0x61, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x61, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x61,
	0x74, 0x73, 0x49, 0x6e, 0x22, 0x28, 0x0a, 0x0d, 0x50, 0x65, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x9c,
	0x02, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d,
	0x73, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x53, 0x77,
	0x61, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x6c,
	0x6c, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x6e, 0x65, 0x77, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x65, 0x77, 0x53, 0x77, 0x61, 0x70, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75, 0x73, 0x70, 0x69,
	0x63, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x30, 0x0a,
	0x18, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x22,
	0x31, 0x0a, 0x19, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x9a, 0x09, 0x0a, 0x08,
	0x50, 0x65, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x12, 0x3b, 0x0a, 0x07, 0x53, 0x77, 0x61, 0x70,
	0x4f, 0x75, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x53,
	0x77, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x12,
	0x17, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x49,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x77, 0x61, 0x70, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x12, 0x18, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70,
	0x2e, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x61, 0x70, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x65, 0x65,
	0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61,
	0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73,
	0x12, 0x1a, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x77, 0x61, 0x70, 0x73, 0x12,
	0x23, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x77, 0x61,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x77, 0x61, 0x70, 0x73, 0x12, 0x1a, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x61,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x77, 0x61, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x53,
	0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x77, 0x61, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x10, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x47, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70,
	0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x77, 0x61, 0x70, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x50, 0x65, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70,
	0x2e, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x10, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x65, 0x72, 0x12,
	0x1b, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x38,
	0x0a, 0x0a, 0x41, 0x64, 0x64, 0x53, 0x75, 0x73, 0x50, 0x65, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61,
	0x70, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x53, 0x75, 0x73, 0x50, 0x65, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x77, 0x61, 0x70, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61,
	0x70, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4d, 0x0a, 0x10, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x77, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x77, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x0f, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61,
	0x70, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77,
	0x61, 0x70, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_peerswaprpc_proto_rawDescOnce sync.Once
	file_peerswaprpc_proto_rawDescData []byte
)

func file_peerswaprpc_proto_rawDescGZIP() []byte {
	file_peerswaprpc_proto_rawDescOnce.Do(func() {
		file_peerswaprpc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_peerswaprpc_proto_rawDesc), len(file_peerswaprpc_proto_rawDesc)))
	})
	return file_peerswaprpc_proto_rawDescData
}

var file_peerswaprpc_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_peerswaprpc_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_peerswaprpc_proto_goTypes = []any{
	(RequestedSwap_SwapType)(0),        // 0: peerswap.RequestedSwap.SwapType
	(*GetAddressRequest)(nil),          // 1: peerswap.GetAddressRequest
	(*GetAddressResponse)(nil),         // 2: peerswap.GetAddressResponse
	(*GetBalanceRequest)(nil),          // 3: peerswap.GetBalanceRequest
	(*GetBalanceResponse)(nil),         // 4: peerswap.GetBalanceResponse
	(*SendToAddressRequest)(nil),       // 5: peerswap.SendToAddressRequest
	(*SendToAddressResponse)(nil),      // 6: peerswap.SendToAddressResponse
	(*SwapOutRequest)(nil),             // 7: peerswap.SwapOutRequest
	(*SwapOutResponse)(nil),            // 8: peerswap.SwapOutResponse
	(*SwapInRequest)(nil),              // 9: peerswap.SwapInRequest
	(*SwapResponse)(nil),               // 10: peerswap.SwapResponse
	(*GetSwapRequest)(nil),             // 11: peerswap.GetSwapRequest
	(*ListSwapsRequest)(nil),           // 12: peerswap.ListSwapsRequest
	(*ListSwapsResponse)(nil),          // 13: peerswap.ListSwapsResponse
	(*ListPeersRequest)(nil),           // 14: peerswap.ListPeersRequest
	(*ListPeersResponse)(nil),          // 15: peerswap.ListPeersResponse
	(*ReloadPolicyFileRequest)(nil),    // 16: peerswap.ReloadPolicyFileRequest
	(*AddPeerRequest)(nil),             // 17: peerswap.AddPeerRequest
	(*RemovePeerRequest)(nil),          // 18: peerswap.RemovePeerRequest
	(*ListRequestedSwapsRequest)(nil),  // 19: peerswap.ListRequestedSwapsRequest
	(*ListRequestedSwapsResponse)(nil), // 20: peerswap.ListRequestedSwapsResponse
	(*RequestSwapList)(nil),            // 21: peerswap.RequestSwapList
	(*RequestedSwap)(nil),              // 22: peerswap.RequestedSwap
	(*PrettyPrintSwap)(nil),            // 23: peerswap.PrettyPrintSwap
	(*PeerSwapPeer)(nil),               // 24: peerswap.PeerSwapPeer
	(*PeerSwapPeerChannel)(nil),        // 25: peerswap.PeerSwapPeerChannel
	(*SwapStats)(nil),                  // 26: peerswap.SwapStats
	(*PeerSwapNodes)(nil),              // 27: peerswap.PeerSwapNodes
	(*Policy)(nil),                     // 28: peerswap.Policy
	(*AllowSwapRequestsRequest)(nil),   // 29: peerswap.AllowSwapRequestsRequest
	(*AllowSwapRequestsResponse)(nil),  // 30: peerswap.AllowSwapRequestsResponse
	(*Empty)(nil),                      // 31: peerswap.Empty
	nil,                                // 32: peerswap.ListRequestedSwapsResponse.RequestedSwapsEntry
}
var file_peerswaprpc_proto_depIdxs = []int32{
	23, // 0: peerswap.SwapOutResponse.swap:type_name -> peerswap.PrettyPrintSwap
	23, // 1: peerswap.SwapResponse.swap:type_name -> peerswap.PrettyPrintSwap
	23, // 2: peerswap.ListSwapsResponse.swaps:type_name -> peerswap.PrettyPrintSwap
	24, // 3: peerswap.ListPeersResponse.peers:type_name -> peerswap.PeerSwapPeer
	32, // 4: peerswap.ListRequestedSwapsResponse.requested_swaps:type_name -> peerswap.ListRequestedSwapsResponse.RequestedSwapsEntry
	22, // 5: peerswap.RequestSwapList.requested_swaps:type_name -> peerswap.RequestedSwap
	0,  // 6: peerswap.RequestedSwap.swap_type:type_name -> peerswap.RequestedSwap.SwapType
	25, // 7: peerswap.PeerSwapPeer.channels:type_name -> peerswap.PeerSwapPeerChannel
	26, // 8: peerswap.PeerSwapPeer.as_sender:type_name -> peerswap.SwapStats
	26, // 9: peerswap.PeerSwapPeer.as_receiver:type_name -> peerswap.SwapStats
	21, // 10: peerswap.ListRequestedSwapsResponse.RequestedSwapsEntry.value:type_name -> peerswap.RequestSwapList
	7,  // 11: peerswap.PeerSwap.SwapOut:input_type -> peerswap.SwapOutRequest
	9,  // 12: peerswap.PeerSwap.SwapIn:input_type -> peerswap.SwapInRequest
	11, // 13: peerswap.PeerSwap.GetSwap:input_type -> peerswap.GetSwapRequest
	12, // 14: peerswap.PeerSwap.ListSwaps:input_type -> peerswap.ListSwapsRequest
	14, // 15: peerswap.PeerSwap.ListPeers:input_type -> peerswap.ListPeersRequest
	19, // 16: peerswap.PeerSwap.ListRequestedSwaps:input_type -> peerswap.ListRequestedSwapsRequest
	12, // 17: peerswap.PeerSwap.ListActiveSwaps:input_type -> peerswap.ListSwapsRequest
	29, // 18: peerswap.PeerSwap.AllowSwapRequests:input_type -> peerswap.AllowSwapRequestsRequest
	16, // 19: peerswap.PeerSwap.ReloadPolicyFile:input_type -> peerswap.ReloadPolicyFileRequest
	17, // 20: peerswap.PeerSwap.AddPeer:input_type -> peerswap.AddPeerRequest
	18, // 21: peerswap.PeerSwap.RemovePeer:input_type -> peerswap.RemovePeerRequest
	17, // 22: peerswap.PeerSwap.AddSusPeer:input_type -> peerswap.AddPeerRequest
	18, // 23: peerswap.PeerSwap.RemoveSusPeer:input_type -> peerswap.RemovePeerRequest
	1,  // 24: peerswap.PeerSwap.LiquidGetAddress:input_type -> peerswap.GetAddressRequest
	3,  // 25: peerswap.PeerSwap.LiquidGetBalance:input_type -> peerswap.GetBalanceRequest
	5,  // 26: peerswap.PeerSwap.LiquidSendToAddress:input_type -> peerswap.SendToAddressRequest
	31, // 27: peerswap.PeerSwap.Stop:input_type -> peerswap.Empty
	10, // 28: peerswap.PeerSwap.SwapOut:output_type -> peerswap.SwapResponse
	10, // 29: peerswap.PeerSwap.SwapIn:output_type -> peerswap.SwapResponse
	10, // 30: peerswap.PeerSwap.GetSwap:output_type -> peerswap.SwapResponse
	13, // 31: peerswap.PeerSwap.ListSwaps:output_type -> peerswap.ListSwapsResponse
	15, // 32: peerswap.PeerSwap.ListPeers:output_type -> peerswap.ListPeersResponse
	20, // 33: peerswap.PeerSwap.ListRequestedSwaps:output_type -> peerswap.ListRequestedSwapsResponse
	13, // 34: peerswap.PeerSwap.ListActiveSwaps:output_type -> peerswap.ListSwapsResponse
	28, // 35: peerswap.PeerSwap.AllowSwapRequests:output_type -> peerswap.Policy
	28, // 36: peerswap.PeerSwap.ReloadPolicyFile:output_type -> peerswap.Policy
	28, // 37: peerswap.PeerSwap.AddPeer:output_type -> peerswap.Policy
	28, // 38: peerswap.PeerSwap.RemovePeer:output_type -> peerswap.Policy
	28, // 39: peerswap.PeerSwap.AddSusPeer:output_type -> peerswap.Policy
	28, // 40: peerswap.PeerSwap.RemoveSusPeer:output_type -> peerswap.Policy
	2,  // 41: peerswap.PeerSwap.LiquidGetAddress:output_type -> peerswap.GetAddressResponse
	4,  // 42: peerswap.PeerSwap.LiquidGetBalance:output_type -> peerswap.GetBalanceResponse
	6,  // 43: peerswap.PeerSwap.LiquidSendToAddress:output_type -> peerswap.SendToAddressResponse
	31, // 44: peerswap.PeerSwap.Stop:output_type -> peerswap.Empty
	28, // [28:45] is the sub-list for method output_type
	11, // [11:28] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_peerswaprpc_proto_init() }
func file_peerswaprpc_proto_init() {
	if File_peerswaprpc_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_peerswaprpc_proto_rawDesc), len(file_peerswaprpc_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_peerswaprpc_proto_goTypes,
		DependencyIndexes: file_peerswaprpc_proto_depIdxs,
		EnumInfos:         file_peerswaprpc_proto_enumTypes,
		MessageInfos:      file_peerswaprpc_proto_msgTypes,
	}.Build()
	File_peerswaprpc_proto = out.File
	file_peerswaprpc_proto_goTypes = nil
	file_peerswaprpc_proto_depIdxs = nil
}
